/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { customHeaderAuthenticationProvider } from './authentication';
import { Environment } from './configuration';
import { DEFAULT_CONFIGURATION, DEFAULT_RETRY_CONFIG, } from './defaultConfiguration';
import { ApiError } from './core';
import { setHeader } from './core';
import { updateUserAgent } from './core';
import { AbortError, createRequestBuilderFactory, } from './core';
import { HttpClient } from './clientAdapter';
export class Client {
    constructor(config) {
        var _a, _b, _c, _d;
        this._config = Object.assign(Object.assign({}, DEFAULT_CONFIGURATION), config);
        this._retryConfig = Object.assign(Object.assign({}, DEFAULT_RETRY_CONFIG), (_a = this._config.httpClientOptions) === null || _a === void 0 ? void 0 : _a.retryConfig);
        this._timeout =
            typeof ((_b = this._config.httpClientOptions) === null || _b === void 0 ? void 0 : _b.timeout) != 'undefined'
                ? this._config.httpClientOptions.timeout
                : this._config.timeout;
        this._userAgent = updateUserAgent('APIMatic CLI');
        this._requestBuilderFactory = createRequestHandlerFactory(server => getBaseUri(server, this._config), customHeaderAuthenticationProvider({ 'Authorization': this._config.authorization, }), new HttpClient(AbortError, {
            timeout: this._timeout,
            clientConfigOverrides: this._config.unstable_httpClientOptions,
            httpAgent: (_c = this._config.httpClientOptions) === null || _c === void 0 ? void 0 : _c.httpAgent,
            httpsAgent: (_d = this._config.httpClientOptions) === null || _d === void 0 ? void 0 : _d.httpsAgent,
        }), [
            withErrorHandlers,
            withUserAgent(this._userAgent),
            withAuthenticationByDefault,
        ], this._retryConfig);
    }
    getRequestBuilderFactory() {
        return this._requestBuilderFactory;
    }
    /**
     * Clone this client and override given configuration options
     */
    withConfiguration(config) {
        return new Client(Object.assign(Object.assign({}, this._config), config));
    }
}
function createHttpClientAdapter(client) {
    return async (request, requestOptions) => {
        return await client.executeRequest(request, requestOptions);
    };
}
function getBaseUri(server = 'default', config) {
    if (config.environment === Environment.Production) {
        if (server === 'default') {
            return 'https://api.apimatic.io';
        }
    }
    throw new Error('Could not get Base URL. Invalid environment or server.');
}
function createRequestHandlerFactory(baseUrlProvider, authProvider, httpClient, addons, retryConfig) {
    const requestBuilderFactory = createRequestBuilderFactory(createHttpClientAdapter(httpClient), baseUrlProvider, ApiError, authProvider, retryConfig);
    return tap(requestBuilderFactory, ...addons);
}
function tap(requestBuilderFactory, ...callback) {
    return (...args) => {
        const requestBuilder = requestBuilderFactory(...args);
        callback.forEach(c => c(requestBuilder));
        return requestBuilder;
    };
}
function withErrorHandlers(rb) {
    rb.defaultToError(ApiError);
}
function withUserAgent(userAgent) {
    return (rb) => {
        rb.interceptRequest(request => {
            var _a;
            const headers = (_a = request.headers) !== null && _a !== void 0 ? _a : {};
            setHeader(headers, 'user-agent', userAgent);
            return Object.assign(Object.assign({}, request), { headers });
        });
    };
}
function withAuthenticationByDefault(rb) {
    rb.authenticate(true);
}
//# sourceMappingURL=client.js.map