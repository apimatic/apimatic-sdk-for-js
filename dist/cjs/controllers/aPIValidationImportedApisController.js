"use strict";
/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.APIValidationImportedApisController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var apiValidationSummary_1 = require("../models/apiValidationSummary");
var docsValidationSummary_1 = require("../models/docsValidationSummary");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var APIValidationImportedApisController = /** @class */ (function (_super) {
    tslib_1.__extends(APIValidationImportedApisController, _super);
    function APIValidationImportedApisController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Validate an API using the [APIMatic Validator](https://docs.apimatic.io/generate-sdks/overview-
     * sdks#step-2-api-validation).
     *
     * @param apiEntityId   The ID of the API Entity to perform validation for.
     * @return Response from the API call
     */
    APIValidationImportedApisController.prototype.validateAPI = function (apiEntityId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                req.baseUrl('default');
                mapped = req.prepareArgs({ apiEntityId: [apiEntityId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/api-entities/", "/api-validation-summary"], ["/api-entities/", "/api-validation-summary"])), mapped.apiEntityId);
                req.throwOn(400, core_1.ApiError, 'Bad Request');
                req.throwOn(403, core_1.ApiError, 'Forbidden');
                req.throwOn(404, core_1.ApiError, 'API not found');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(apiValidationSummary_1.apiValidationSummarySchema, requestOptions)];
            });
        });
    };
    /**
     * Validate an API for documentation generation. This process validates the API for missing examples or
     * missing descriptions.
     *
     * @param apiEntityId   The ID of the API Entity to perform validation for.
     * @return Response from the API call
     */
    APIValidationImportedApisController.prototype.validateAPIForDocs = function (apiEntityId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                req.baseUrl('default');
                mapped = req.prepareArgs({ apiEntityId: [apiEntityId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/api-entities/", "/docs-validation-summary"], ["/api-entities/", "/docs-validation-summary"])), mapped.apiEntityId);
                req.throwOn(400, core_1.ApiError, 'Bad Request');
                req.throwOn(403, core_1.ApiError, 'Forbidden');
                req.throwOn(404, core_1.ApiError, 'API not found');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(docsValidationSummary_1.docsValidationSummarySchema, requestOptions)];
            });
        });
    };
    return APIValidationImportedApisController;
}(baseController_1.BaseController));
exports.APIValidationImportedApisController = APIValidationImportedApisController;
var templateObject_1, templateObject_2;
//# sourceMappingURL=aPIValidationImportedApisController.js.map