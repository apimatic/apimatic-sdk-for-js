"use strict";
/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.DocsPortalManagementController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var accept3_1 = require("../models/accept3");
var contentType_1 = require("../models/contentType");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var DocsPortalManagementController = /** @class */ (function (_super) {
    tslib_1.__extends(DocsPortalManagementController, _super);
    function DocsPortalManagementController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Publish artifacts for a Hosted Portal.
     *
     * This endpoint regenerates all the artifacts for a hosted portal and uploads them to APIMatic's cloud
     * storage, from where the Portal fetches them. These artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * Call this endpoint to update your Hosted Portal after you update an API Entity via any of the Import
     * API Endpoints.
     *
     * __**Note: If you have an embedded portal against the same API Entity, artifacts for that portal will
     * get updated as well.**__
     *
     * @param apiEntityId   The ID of the API Entity to update the portal artifacts for.
     * @return Response from the API call
     */
    DocsPortalManagementController.prototype.publishHostedPortal = function (apiEntityId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({ apiEntityId: [apiEntityId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/api-entities/", "/hosted-portal"], ["/api-entities/", "/hosted-portal"])), mapped.apiEntityId);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Publish artifacts for an Embedded Portal and get the Portal Embed script.
     *
     * This endpoint regenerates all the artifacts for an embedded portal and uploads them to APIMatic's
     * cloud storage, from where the Portal fetches them. These artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * Call this endpoint to update your Embedded Portal after you update an API Entity via any of the
     * Import API Endpoints. This endpoint returns the Portal Embed script in the response.
     *
     * __**Note: If you have a hosted portal against the same API Entity, artifacts for that portal will
     * get updated as well.**__
     *
     * @param apiEntityId   The ID of the API Entity to update the portal artifacts for.
     * @return Response from the API call
     */
    DocsPortalManagementController.prototype.publishEmbeddedPortal = function (apiEntityId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({ apiEntityId: [apiEntityId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/api-entities/", "/embedded-portal"], ["/api-entities/", "/embedded-portal"])), mapped.apiEntityId);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Generate an On-premise Documentation Portal for an API Entity. This endpoint generates all artifacts
     * for the Portal and packages them together into a zip file along with the required HTML, CSS and JS
     * files. The generated artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * The endpoint returns a zip file that contains a static Site and can be hosted on any Web Server.
     *
     * @param apiEntityId   The ID of the API Entity to generate the Portal for.
     * @param accept        Example: application/zip
     * @return Response from the API call
     */
    DocsPortalManagementController.prototype.generateOnPremPortalViaAPIEntity = function (apiEntityId, accept, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    apiEntityId: [apiEntityId, (0, schema_1.string)()],
                    accept: [accept, accept3_1.accept3Schema]
                });
                req.header('Accept', mapped.accept);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/api-entities/", "/on-prem-portal"], ["/api-entities/", "/on-prem-portal"])), mapped.apiEntityId);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Generate an On-premise Documentation Portal by uploading a Portal Build Input. This endpoint
     * generates all artifacts for the Portal and packages them together into a zip file along with the
     * required HTML, CSS and JS files. The generated artifacts include:
     *
     * 1. SDKs
     * 2. Docs
     * 3. API Specification files
     *
     * The endpoint returns a zip file that contains a static Site and can be hosted on any Web Server.
     *
     * @param contentType
     * @param file         The input file to the Portal Generator. Must contain the build file.
     * @return Response from the API call
     */
    DocsPortalManagementController.prototype.generateOnPremPortalViaBuildInput = function (contentType, file, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/portal');
                mapped = req.prepareArgs({
                    contentType: [contentType, contentType_1.contentTypeSchema]
                });
                req.header('Content-Type', mapped.contentType);
                req.formData({
                    file: file
                });
                req.throwOn(400, core_1.ApiError, 'Bad Request');
                req.throwOn(401, core_1.ApiError, 'Unauthorized');
                req.throwOn(402, core_1.ApiError, 'Subscription Issue');
                req.throwOn(422, core_1.ApiError, 'Unprocessable Entity');
                return [2 /*return*/, req.callAsStream(requestOptions)];
            });
        });
    };
    /**
     * Generate Build Input for a Portal created using the UI workflow.  The Build Input will correspond to
     * the draft version of the Portal i.e. unpublished changes will also be included.
     * This can be used to create a backup of your Portal or to migrate from the UI workflow to the docs as
     * code workflow.
     *
     * @param apiGroupId
     * @param apiEntities
     * @return Response from the API call
     */
    DocsPortalManagementController.prototype.generateBuildInputForUnpublishedPortal = function (apiGroupId, apiEntities, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    apiGroupId: [apiGroupId, (0, schema_1.string)()],
                    apiEntities: [apiEntities, (0, schema_1.optional)((0, schema_1.array)((0, schema_1.string)()))]
                });
                req.query('apiEntities', mapped.apiEntities);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/portal/build/", "/draft"], ["/portal/build/", "/draft"])), mapped.apiGroupId);
                return [2 /*return*/, req.callAsJson((0, schema_1.optional)((0, schema_1.unknown)()), requestOptions)];
            });
        });
    };
    /**
     * Generate Build Input for a Portal created using the UI workflow.  The Build Input will correspond to
     * the published version of the Portal i.e. unpublished changes will not be inlcuded.
     * This can be used to create a backup of your Portal or to migrate from the UI workflow to the docs as
     * code workflow.
     *
     * @param apiGroupId
     * @param apiEntities
     * @return Response from the API call
     */
    DocsPortalManagementController.prototype.generateBuildInputForPublishedPortal = function (apiGroupId, apiEntities, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    apiGroupId: [apiGroupId, (0, schema_1.string)()],
                    apiEntities: [apiEntities, (0, schema_1.optional)((0, schema_1.array)((0, schema_1.string)()))]
                });
                req.query('apiEntities', mapped.apiEntities);
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/portal/build/", "/published"], ["/portal/build/", "/published"])), mapped.apiGroupId);
                return [2 /*return*/, req.callAsJson((0, schema_1.optional)((0, schema_1.unknown)()), requestOptions)];
            });
        });
    };
    /**
     * Unpublish a Hosted or Embedded Portal published for an API Entity. Calling this endpoint deletes all
     * the published artifacts for a Portal from APIMatic's cloud storage.
     *
     * In case of a Hosted Portal, to completely remove the Portal, this endpoint needs to be called
     * against all API versions that the Portal hosts.
     *
     * In case of an Embedded Portal, to completely remove the Portal, the user needs to manually remove
     * the Portal Embed script from the embedding site.
     *
     * @param apiEntityId   The ID of the API Entity to unpublish the Portal artifacts for.
     * @return Response from the API call
     */
    DocsPortalManagementController.prototype.unpublishPortal = function (apiEntityId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({ apiEntityId: [apiEntityId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/api-entities/", "/portal"], ["/api-entities/", "/portal"])), mapped.apiEntityId);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    return DocsPortalManagementController;
}(baseController_1.BaseController));
exports.DocsPortalManagementController = DocsPortalManagementController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=docsPortalManagementController.js.map