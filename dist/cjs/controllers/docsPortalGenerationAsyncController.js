"use strict";
/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.DocsPortalGenerationAsyncController = void 0;
var tslib_1 = require("tslib");
var contentType_1 = require("../models/contentType");
var portalGenerationAsyncResponse_1 = require("../models/portalGenerationAsyncResponse");
var portalGenerationStatusResponse_1 = require("../models/portalGenerationStatusResponse");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var core_1 = require("@apimatic/core");
var DocsPortalGenerationAsyncController = /** @class */ (function (_super) {
    tslib_1.__extends(DocsPortalGenerationAsyncController, _super);
    function DocsPortalGenerationAsyncController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create an async On-premise Documentation Portal Generation request by providing a Portal Build
     * Input
     *
     * @param contentType
     * @param file                   The input file to the Portal Generator. Must contain the build file.
     * @param xApiMaticCallbackUrl   Optional header containing callback url. This url will be called by
     *                                              the server once the portal generation completes
     * @return Response from the API call
     */
    DocsPortalGenerationAsyncController.prototype.generateOnPremPortalViaBuildInputAsync = function (contentType, file, xApiMaticCallbackUrl, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/portal/v2');
                mapped = req.prepareArgs({
                    contentType: [contentType, contentType_1.contentTypeSchema],
                    xApiMaticCallbackUrl: [xApiMaticCallbackUrl, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('Content-Type', mapped.contentType);
                req.header('X-APIMatic-CallbackUrl', mapped.xApiMaticCallbackUrl);
                req.formData({ file: file });
                req.throwOn(400, core_1.ApiError, 'Bad Request');
                req.throwOn(401, core_1.ApiError, 'Unauthorized');
                req.throwOn(402, core_1.ApiError, 'Subscription Issue');
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsJson(portalGenerationAsyncResponse_1.portalGenerationAsyncResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get the status of a portal generation request
     *
     * @param id
     * @return Response from the API call
     */
    DocsPortalGenerationAsyncController.prototype.getPortalGenerationStatus = function (id, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ id: [id, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/portal/v2/", "/status"], ["/portal/v2/", "/status"])), mapped.id);
                req.throwOn(400, core_1.ApiError, 'Bad Request');
                req.throwOn(401, core_1.ApiError, 'Unauthorized');
                req.throwOn(402, core_1.ApiError, 'Subscription Issue');
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsJson(portalGenerationStatusResponse_1.portalGenerationStatusResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Downloads the portal artifacts. The generated artifacts include:
     *
     *
     * 1. SDKs
     *
     * 2. Docs
     *
     * 3. API Specification files
     *
     *
     * The endpoint returns a zip file that contains a static Site and can be hosted on any Web Server.
     *
     * @param id
     * @return Response from the API call
     */
    DocsPortalGenerationAsyncController.prototype.downloadGeneratedPortal = function (id, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ id: [id, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/portal/v2/", "/download"], ["/portal/v2/", "/download"])), mapped.id);
                req.throwOn(400, core_1.ApiError, 'Bad Request');
                req.throwOn(401, core_1.ApiError, 'Unauthorized');
                req.throwOn(402, core_1.ApiError, 'Subscription Issue');
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsStream(requestOptions)];
            });
        });
    };
    return DocsPortalGenerationAsyncController;
}(baseController_1.BaseController));
exports.DocsPortalGenerationAsyncController = DocsPortalGenerationAsyncController;
var templateObject_1, templateObject_2;
//# sourceMappingURL=docsPortalGenerationAsyncController.js.map