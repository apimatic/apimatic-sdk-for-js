"use strict";
/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.PackageDeploymentController = void 0;
var tslib_1 = require("tslib");
var packageDeploymentInformation_1 = require("../models/packageDeploymentInformation");
var publishedPackage_1 = require("../models/publishedPackage");
var publishPackageInput_1 = require("../models/publishPackageInput");
var updatePackageDeploymentInformation_1 = require("../models/updatePackageDeploymentInformation");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var PackageDeploymentController = /** @class */ (function (_super) {
    tslib_1.__extends(PackageDeploymentController, _super);
    function PackageDeploymentController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Update  Package Deployment Information for an API Entity. To find out more on how to publish a
     * package visit: [Adding Packages to Portal](https://docs.apimatic.io/developer-experience-
     * portal/adding%20packages%20to%20portal/)
     *
     * To find out more about publishing packages visit: [Publish Packages](https://docs.apimatic.
     * io/developer-experience-portal/adding%20packages%20to%20portal/)
     *
     * @param apiEntityId   Unique API Entity Identifier
     * @param body          Package Deployment Information to be updated.
     *                                                                   This comprises of the Platform Template, the
     *                                                                   Repository Name and Version.
     * @return Response from the API call
     */
    PackageDeploymentController.prototype.updatePackageDeploymentInformation = function (apiEntityId, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    apiEntityId: [apiEntityId, (0, schema_1.string)()],
                    body: [body, updatePackageDeploymentInformation_1.updatePackageDeploymentInformationSchema]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/api-entities/", "/docs/package-deployment-information"], ["/api-entities/", "/docs/package-deployment-information"])), mapped.apiEntityId);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Query Package deployment details added for an API Entity.
     * To find out more about adding packages to portal: [Adding Packages to Portal](https://docs.apimatic.
     * io/developer-experience-portal/adding%20packages%20to%20portal/)
     *
     * @param apiEntityId   Unique API Entity identifier
     * @return Response from the API call
     */
    PackageDeploymentController.prototype.packageDeploymentInformation = function (apiEntityId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                req.baseUrl('default');
                mapped = req.prepareArgs({ apiEntityId: [apiEntityId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/api-entities/", "/docs/package-deployment-information"], ["/api-entities/", "/docs/package-deployment-information"])), mapped.apiEntityId);
                return [2 /*return*/, req.callAsJson(packageDeploymentInformation_1.packageDeploymentInformationSchema, requestOptions)];
            });
        });
    };
    /**
     * Returns logs for all packages published for the API.
     *
     * @param apiEntityId   Unique API Identifier
     * @return Response from the API call
     */
    PackageDeploymentController.prototype.getPublishedPackagesForAPI = function (apiEntityId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ apiEntityId: [apiEntityId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/api-entities/", "/published-packages"], ["/api-entities/", "/published-packages"])), mapped.apiEntityId);
                return [2 /*return*/, req.callAsJson((0, schema_1.array)(publishedPackage_1.publishedPackageSchema), requestOptions)];
            });
        });
    };
    /**
     * Publish a new package for API by specifying package name and version number.
     *
     * To publish packages using this API, you will first need to add package repository credentials to
     * your APIMatic account.
     * Check out the [docs](https://docs.apimatic.io/advanced/publishing-a-package/) for a guide on adding
     * package repository credentials
     *
     * @param apiEntityId   Unique API Identifier
     * @param body
     * @return Response from the API call
     */
    PackageDeploymentController.prototype.publishAPackageForAPI = function (apiEntityId, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    apiEntityId: [apiEntityId, (0, schema_1.string)()],
                    body: [body, publishPackageInput_1.publishPackageInputSchema]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/api-entities/", "/published-packages/"], ["/api-entities/", "/published-packages/"])), mapped.apiEntityId);
                return [2 /*return*/, req.callAsJson(publishedPackage_1.publishedPackageSchema, requestOptions)];
            });
        });
    };
    /**
     * Pull details for a certain published package by specifying Published Package Id.
     *
     * @param apiEntityId          Unique API Identifier
     * @param publishedPackageId   Unique Published Package Identifier
     * @return Response from the API call
     */
    PackageDeploymentController.prototype.getAPublishedPackage = function (apiEntityId, publishedPackageId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                req.baseUrl('default');
                mapped = req.prepareArgs({
                    apiEntityId: [apiEntityId, (0, schema_1.string)()],
                    publishedPackageId: [publishedPackageId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/api/api-entities/", "/published-packages/", ""], ["/api/api-entities/", "/published-packages/", ""])), mapped.apiEntityId, mapped.publishedPackageId);
                return [2 /*return*/, req.callAsJson(publishedPackage_1.publishedPackageSchema, requestOptions)];
            });
        });
    };
    return PackageDeploymentController;
}(baseController_1.BaseController));
exports.PackageDeploymentController = PackageDeploymentController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
//# sourceMappingURL=packageDeploymentController.js.map