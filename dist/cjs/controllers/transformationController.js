"use strict";
/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.TransformationController = void 0;
var tslib_1 = require("tslib");
var contentType_1 = require("../models/contentType");
var exportFormats_1 = require("../models/exportFormats");
var transformation_1 = require("../models/transformation");
var transformViaUrlRequest_1 = require("../models/transformViaUrlRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var TransformationController = /** @class */ (function (_super) {
    tslib_1.__extends(TransformationController, _super);
    function TransformationController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Transform an API into any of the supported API specification formats by uploading the API
     * specification file.
     *
     * This endpoint transforms and then uploads the transformed API specification to APIMatic's cloud
     * storage. An ID for the transformation performed is returned as part of the response.
     *
     * @param contentType
     * @param file          The API specification file.<br>The type of the specification file should be
     *                                       any of the [supported formats](https://docs.apimatic.io/api-
     *                                       transformer/overview-transformer#supported-input-formats).
     * @param exportFormat  The structure contains API specification formats that Transformer can
     *                                       convert to.
     * @return Response from the API call
     */
    TransformationController.prototype.transformViaFile = function (contentType, file, exportFormat, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/transformations/transform-via-file');
                mapped = req.prepareArgs({
                    contentType: [contentType, contentType_1.contentTypeSchema],
                    exportFormat: [exportFormat, exportFormats_1.exportFormatsSchema]
                });
                req.header('Content-Type', mapped.contentType);
                req.formData({ file: file, export_format: mapped.exportFormat });
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsJson(transformation_1.transformationSchema, requestOptions)];
            });
        });
    };
    /**
     * Transform an API into any of the supported API specification formats by providing the URL of the API
     * specification file.
     *
     * This endpoint transforms and then uploads the transformed API specification to APIMatic's cloud
     * storage. An ID for the transformation performed is returned as part of the response.
     *
     * @param body         Request Body
     * @return Response from the API call
     */
    TransformationController.prototype.transformViaUrl = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/transformations/transform-via-url');
                mapped = req.prepareArgs({
                    body: [body, transformViaUrlRequest_1.transformViaUrlRequestSchema]
                });
                req.header('Content-Type', 'application/vnd.apimatic.urlTransformDto.v1+json');
                req.json(mapped.body);
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsJson(transformation_1.transformationSchema, requestOptions)];
            });
        });
    };
    /**
     * Download the transformed API specification file transformed via the Transformation endpoints.
     *
     * @param transformationId  The ID of transformation received in the response of the [Transform Via File
     *                                    ](https://www.apimatic.io/api-docs-
     *                                    preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-file) or [Transform Via URL  ](https:
     *                                    //www.apimatic.io/api-docs-
     *                                    preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-url) calls.
     * @return Response from the API call
     */
    TransformationController.prototype.downloadTransformedFile = function (transformationId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    transformationId: [transformationId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/transformations/", "/converted-file"], ["/transformations/", "/converted-file"])), mapped.transformationId);
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsStream(requestOptions)];
            });
        });
    };
    /**
     * Download the API Specification file used as input for a particular Transformation performed via the
     * Transformation endpoints.
     *
     * @param transformationId  The ID of the transformation to download the API specification for. The
     *                                    transformation ID is received in the response of the [Transform Via File
     *                                    ](https://www.apimatic.io/api-docs-
     *                                    preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-file) or [Transform Via URL](https://www.
     *                                    apimatic.io/api-docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-url) calls.
     * @return Response from the API call
     */
    TransformationController.prototype.downloadInputFile = function (transformationId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    transformationId: [transformationId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/transformations/", "/input-file"], ["/transformations/", "/input-file"])), mapped.transformationId);
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsStream(requestOptions)];
            });
        });
    };
    /**
     * Get a list of all API transformations performed.
     *
     * @return Response from the API call
     */
    TransformationController.prototype.listAllTransformations = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/transformations');
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsJson((0, schema_1.array)(transformation_1.transformationSchema), requestOptions)];
            });
        });
    };
    /**
     * Get details on a particular Transformation performed via the Transformation endpoints.
     *
     * @param transformationId  The ID of the transformation to fetch. The transformation ID is received in
     *                                    the response of the [Transform Via File ](https://www.apimatic.io/api-docs-
     *                                    preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-file) or [Transform Via URL  ](https:
     *                                    //www.apimatic.io/api-docs-
     *                                    preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-url) calls.
     * @return Response from the API call
     */
    TransformationController.prototype.getATransformation = function (transformationId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    transformationId: [transformationId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/transformations/", ""], ["/transformations/", ""])), mapped.transformationId);
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.callAsJson(transformation_1.transformationSchema, requestOptions)];
            });
        });
    };
    /**
     * Delete a particular Transformation performed for an API via the Transformation endpoints.
     *
     * @param transformationId  The ID of the transformation to delete. The transformation ID is received in
     *                                    the response of the [Transform Via File ](https://www.apimatic.io/api-docs-
     *                                    preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-file) or [Transform Via URL](https://www.
     *                                    apimatic.io/api-docs-preview/dashboard/60eea3b7a73395c3052d961b/v/3_0#/http/api-
     *                                    endpoints/transformation/transform-via-url) calls.
     * @return Response from the API call
     */
    TransformationController.prototype.deleteTransformation = function (transformationId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    transformationId: [transformationId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/transformations/", ""], ["/transformations/", ""])), mapped.transformationId);
                req.authenticate([{ authorization: true }]);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    return TransformationController;
}(baseController_1.BaseController));
exports.TransformationController = TransformationController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=transformationController.js.map