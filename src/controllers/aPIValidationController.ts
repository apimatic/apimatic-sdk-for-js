/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  ApiValidationSummary,
  apiValidationSummarySchema,
} from '../models/apiValidationSummary';
import {
  DocsValidationSummary,
  docsValidationSummarySchema,
} from '../models/docsValidationSummary';
import { string } from '../schema';
import { BaseController } from './baseController';

export class APIValidationController extends BaseController {
  /**
   * Validate an API using the [APIMatic Validator](https://docs.apimatic.io/generate-sdks/overview-
   * sdks#step-2-api-validation).
   *
   * @param apiEntityId   The ID of the API Entity to perform validation for.
   * @return Response from the API call
   */
  async validateAPI(
    apiEntityId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiValidationSummary>> {
    const req = this.createRequest('GET');
    req.baseUrl('default');
    const mapped = req.prepareArgs({ apiEntityId: [apiEntityId, string()] });
    req.appendTemplatePath`/api-entities/${mapped.apiEntityId}/api-validation-summary`;
    req.throwOn(400, ApiError, 'Bad Request');
    req.throwOn(403, ApiError, 'Forbidden');
    req.throwOn(404, ApiError, 'API not found');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(apiValidationSummarySchema, requestOptions);
  }

  /**
   * Validate an API for documentation generation. This process validates the API for missing examples or
   * missing descriptions.
   *
   * @param apiEntityId   The ID of the API Entity to perform validation for.
   * @return Response from the API call
   */
  async validateAPIForDocs(
    apiEntityId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DocsValidationSummary>> {
    const req = this.createRequest('GET');
    req.baseUrl('default');
    const mapped = req.prepareArgs({ apiEntityId: [apiEntityId, string()] });
    req.appendTemplatePath`/api-entities/${mapped.apiEntityId}/docs-validation-summary`;
    req.throwOn(400, ApiError, 'Bad Request');
    req.throwOn(403, ApiError, 'Forbidden');
    req.throwOn(404, ApiError, 'API not found');
    req.throwOn(500, ApiError, 'Internal Server Error');
    return req.callAsJson(docsValidationSummarySchema, requestOptions);
  }
}
