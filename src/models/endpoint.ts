/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  Schema,
  string,
  unknown,
} from '../schema';
import { Parameter, parameterSchema } from './parameter';
import { Response, responseSchema } from './response';
import { TestCase, testCaseSchema } from './testCase';

/** This structure encapsulates all the attributes of an API Endpoint. */
export interface Endpoint {
  /** Unique Endpoint Identifier */
  id: string;
  /** Unique API Identifier */
  apiId: string;
  /** Endpoint Name */
  name: string;
  /** Endpoint Method */
  httpMethod: string;
  /** The Group Endpoint belongs to */
  group: string;
  /** If Endpoint warrants authentication or not */
  skipAuthentication: boolean;
  /** The Endpoint route */
  route: string;
  /** The structure encapsulates all details of a request response */
  response: Response;
  /** Enabling this option allows optional query parameters */
  hasOptionalQueryParams: boolean;
  /** Enabling this option allows optional field parameters */
  hasOptionalFieldParams: boolean;
  /** Enabling this option collects API endpoint parameters as collections */
  collectParameters: boolean;
  /** Enabling this option allows wrapping of body in objects */
  wrapBodyInObject: boolean;
  /** What scopes apply to an Endpoint */
  requiredScopes: string[];
  /** Endpoint Paramaters */
  parameters: Parameter[];
  /** Errors that Endpoint may output */
  errors: unknown[];
  /** Test Cases associated with Endpoint */
  testCases: TestCase[];
}

export const endpointSchema: Schema<Endpoint> = object({
  id: ['id', string()],
  apiId: ['apiId', string()],
  name: ['name', string()],
  httpMethod: ['httpMethod', string()],
  group: ['group', string()],
  skipAuthentication: ['skipAuthentication', boolean()],
  route: ['route', string()],
  response: ['response', lazy(() => responseSchema)],
  hasOptionalQueryParams: ['hasOptionalQueryParams', boolean()],
  hasOptionalFieldParams: ['hasOptionalFieldParams', boolean()],
  collectParameters: ['collectParameters', boolean()],
  wrapBodyInObject: ['wrapBodyInObject', boolean()],
  requiredScopes: ['requiredScopes', array(string())],
  parameters: ['parameters', array(lazy(() => parameterSchema))],
  errors: ['errors', array(unknown())],
  testCases: ['testCases', array(lazy(() => testCaseSchema))],
});
