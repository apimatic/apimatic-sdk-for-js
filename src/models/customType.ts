/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  lazy,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema';
import { Field, fieldSchema } from './field';
import {
  ImplementationType,
  implementationTypeSchema,
} from './implementationType';

/** This structure helps creates a new complex model type. */
export interface CustomType {
  /** Unique Type Identifier */
  id: string;
  /** Unique  API Entity identifier */
  apiId: string;
  /** Custom Type Name */
  name: string;
  /** Data Format */
  baseType: string;
  /** The structure helps describes the nature of implementation of a  custom model. A model can be of 3 types. */
  implementationType: ImplementationType;
  /** Type Fields */
  fields: Field[];
  additionalProperties?: Record<string, unknown>;
}

export const customTypeSchema: Schema<CustomType> = typedExpandoObject(
  {
    id: ['id', string()],
    apiId: ['apiId', string()],
    name: ['name', string()],
    baseType: ['baseType', string()],
    implementationType: ['implementationType', implementationTypeSchema],
    fields: ['fields', array(lazy(() => fieldSchema))],
  },
  'additionalProperties',
  optional(unknown())
);
