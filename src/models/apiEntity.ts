/**
 * Apimatic APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, boolean, lazy, object, Schema, string } from '../schema';
import { Authentication, authenticationSchema } from './authentication';
import { CodeGenSettings, codeGenSettingsSchema } from './codeGenSettings';
import {
  ServerConfiguration,
  serverConfigurationSchema,
} from './serverConfiguration';
import { TestGenSettings, testGenSettingsSchema } from './testGenSettings';

/** The API Entity Structure encapsulates all the details of an API Entity. An API entity is a unique API Version. */
export interface ApiEntity {
  /** Unique API Entity identifier */
  id: string;
  /** Enrcypted API Entity Id */
  encryptedId: string;
  /** API Integration Key. Obtain from API Card on Dashboard. */
  apiKey: string;
  /** Unique API Group Identifier */
  apiGroupId: string;
  /** Cover Image */
  imageUri: string;
  /** Entity creation date */
  creationDate: string;
  /** API Status (Deprecated) */
  public: boolean;
  /** API Entity  Name */
  name: string;
  /** Base URI for the Entity */
  baseUri: string;
  /** Entity Version Number */
  version: string;
  /** Header Content */
  additionalHeaders: string[];
  /** Authentication Details */
  authentication: Authentication;
  /** Code Gen Settings */
  codeGenSettings: CodeGenSettings;
  /** Test Generation Settings */
  testGenSettings: TestGenSettings;
  /** API Errors */
  errors: string[];
  /** Server Settings */
  serverConfiguration: ServerConfiguration;
}

export const apiEntitySchema: Schema<ApiEntity> = object({
  id: ['id', string()],
  encryptedId: ['encryptedId', string()],
  apiKey: ['apiKey', string()],
  apiGroupId: ['apiGroupId', string()],
  imageUri: ['imageUri', string()],
  creationDate: ['creationDate', string()],
  public: ['public', boolean()],
  name: ['name', string()],
  baseUri: ['baseUri', string()],
  version: ['version', string()],
  additionalHeaders: ['additionalHeaders', array(string())],
  authentication: ['authentication', lazy(() => authenticationSchema)],
  codeGenSettings: ['codeGenSettings', lazy(() => codeGenSettingsSchema)],
  testGenSettings: ['testGenSettings', lazy(() => testGenSettingsSchema)],
  errors: ['errors', array(string())],
  serverConfiguration: [
    'serverConfiguration',
    lazy(() => serverConfigurationSchema),
  ],
});
